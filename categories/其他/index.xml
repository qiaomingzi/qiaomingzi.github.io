<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>其他 on 李明梓</title><link>https://qiaomingzi.github.io/categories/%E5%85%B6%E4%BB%96/</link><description>Recent content in 其他 on 李明梓</description><generator>Hugo 0.125.0</generator><language>cn</language><lastBuildDate>Fri, 20 May 2022 15:42:33 +0800</lastBuildDate><atom:link href="https://qiaomingzi.github.io/categories/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml"/><item><title>关于调音声卡</title><link>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/%E5%A3%B0%E5%8D%A1/</link><pubDate>Fri, 20 May 2022 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/%E5%A3%B0%E5%8D%A1/</guid><description>一：概要 本文用于解决
1.1.参考 https://www.bilibili.com/read/cv11117891
https://zhuanlan.zhihu.com/p/350530697
二：关于声卡 声卡 (Sound Card)也叫音频卡、声效卡，是计算机多媒体系统中最基本的组成部分，是实现声波/数字信号相互转换的一种硬件。可在计算机程序的控制下向计算机提供音频信号的输入和输出。
声卡从话筒中获取声音模拟信号，通过模数转换器(ADC)，将声波振幅信号采样转换成一串数字信号，存储到计算机中。播放音频文件时，这些数字信号送到数模转换器(DAC)，以同样的采样速度还原为模拟波形，放大后送到扬声器发声，这一技术称为脉冲编码调制技术(PCM)，
声卡发展至今，主要分为板卡式、集成式和外置式三种接口类型
2.1 相关名词 ASIO
EQ
WDM
DSP
DAC
声卡使用数模转换器,它将记录或生成的数字信号数据转换为模拟格式。输出信号使用标准互连连接到放大器、耳机或外部设备
HDMI
High-Definition Multimedia Interface 高清多媒体接口 是一种专有的音频/视频接口，用于将未压缩的视频数据和压缩或未压缩的数字音频数据从兼容 HDMI 的源设备（例如显示控制器）传输到兼容的计算机显示器、视频投影仪、数字电视或数字音频设备
驱动程序
驱动程序一般指的是设备驱动程序（Device Driver），是一种可以使计算机和设备进行相互通信的特殊程序。相当于硬件的接口，操作系统只有通过这个接口，才能控制硬件设备的工作。
2.2 声卡功能 数字信号处理芯片 数字信号处理芯片可以完成各种信号的记录和播放任务，还可以完成许多处理工作，如音频压缩与解压缩运算、改变采样频率、解释MIDI指令或符号以及控制和协调直接存储器访问（DMA）工作 。 A/D和D/A转换器 声音原本以模拟波形的形式出现，必须转换成数字形式才能在计算机中使用。为实现这种转换，声音卡含有把模拟信号转成数字信号的A/D转换器，使数据可存入磁盘中 。 为了把声音输出信号送给喇叭或其他设备播出，声卡必须使用D/A转换器，把计算机中以数字形式表示的声音转变成模拟信号播出 。 总线接口芯片 总线接口芯片在声卡与系统总线之间传输命令与数据。 音乐合成器 音乐合成器负责将数字音频波形数据或MIDI消息合成为声音 。 混音器 混音器可以将不同途径，如话筒或线路输入、CD输入的声音信号进行混合。此外，混音器还为用户提供软件控制音量的功能。 五：附录</description></item><item><title>关于调音声卡</title><link>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/%E5%A3%B0%E5%8D%A1/</link><pubDate>Fri, 20 May 2022 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/%E5%A3%B0%E5%8D%A1/</guid><description>一：概要 本文用于解决
1.1.参考 https://www.bilibili.com/read/cv11117891
https://zhuanlan.zhihu.com/p/350530697
二：关于声卡 声卡 (Sound Card)也叫音频卡、声效卡，是计算机多媒体系统中最基本的组成部分，是实现声波/数字信号相互转换的一种硬件。可在计算机程序的控制下向计算机提供音频信号的输入和输出。
声卡从话筒中获取声音模拟信号，通过模数转换器(ADC)，将声波振幅信号采样转换成一串数字信号，存储到计算机中。播放音频文件时，这些数字信号送到数模转换器(DAC)，以同样的采样速度还原为模拟波形，放大后送到扬声器发声，这一技术称为脉冲编码调制技术(PCM)，
声卡发展至今，主要分为板卡式、集成式和外置式三种接口类型
2.1 相关名词 ASIO
EQ
WDM
DSP
DAC
声卡使用数模转换器,它将记录或生成的数字信号数据转换为模拟格式。输出信号使用标准互连连接到放大器、耳机或外部设备
HDMI
High-Definition Multimedia Interface 高清多媒体接口 是一种专有的音频/视频接口，用于将未压缩的视频数据和压缩或未压缩的数字音频数据从兼容 HDMI 的源设备（例如显示控制器）传输到兼容的计算机显示器、视频投影仪、数字电视或数字音频设备
驱动程序
驱动程序一般指的是设备驱动程序（Device Driver），是一种可以使计算机和设备进行相互通信的特殊程序。相当于硬件的接口，操作系统只有通过这个接口，才能控制硬件设备的工作。
2.2 声卡功能 数字信号处理芯片 数字信号处理芯片可以完成各种信号的记录和播放任务，还可以完成许多处理工作，如音频压缩与解压缩运算、改变采样频率、解释MIDI指令或符号以及控制和协调直接存储器访问（DMA）工作 。 A/D和D/A转换器 声音原本以模拟波形的形式出现，必须转换成数字形式才能在计算机中使用。为实现这种转换，声音卡含有把模拟信号转成数字信号的A/D转换器，使数据可存入磁盘中 。 为了把声音输出信号送给喇叭或其他设备播出，声卡必须使用D/A转换器，把计算机中以数字形式表示的声音转变成模拟信号播出 。 总线接口芯片 总线接口芯片在声卡与系统总线之间传输命令与数据。 音乐合成器 音乐合成器负责将数字音频波形数据或MIDI消息合成为声音 。 混音器 混音器可以将不同途径，如话筒或线路输入、CD输入的声音信号进行混合。此外，混音器还为用户提供软件控制音量的功能。 五：附录</description></item><item><title>Hugo基本使用</title><link>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 07 May 2021 17:03:36 +0800</pubDate><guid>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>概要： 了解hugo基本使用，通过hugo搭建个人blog
参考 【hugo 】https://gohugo.io/ -https://gohugo.io/functions/ -https://gohugo.io/variables/
【GO模板语法】https://www.topgoer.com
【github集成】https://github.com/peaceiris/actions-gh-pages
【hugo theme】
https://themes.gohugo.io/ https://github.com/CaiJimmy/hugo-theme-stack https://github.com/dillonzq/LoveIt https://github.com/hugo-fixit/FixIt https://github.com/henriksommerfeld/blog-hugo 1.hugo结构说明 # 站点结构 ├── archetypes # 原型 ├── config.toml # 站点配置 ├── content # 站点内容目录 ├── data # 数据模板 ├── layouts # 站点布局模板 ├── static # 静态内容 └── themes # 内容目录 content └── post ├── first-post │ ├── images │ │ ├── a.jpg │ │ ├── b.jpg │ │ └── c.jpg │ ├── index.md (root of page bundle) │ ├── latest.</description></item><item><title>Hugo基本使用</title><link>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 07 May 2021 17:03:36 +0800</pubDate><guid>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>概要： 了解hugo基本使用，通过hugo搭建个人blog
参考 【hugo 】https://gohugo.io/ -https://gohugo.io/functions/ -https://gohugo.io/variables/
【GO模板语法】https://www.topgoer.com
【github集成】https://github.com/peaceiris/actions-gh-pages
【hugo theme】
https://themes.gohugo.io/ https://github.com/CaiJimmy/hugo-theme-stack https://github.com/dillonzq/LoveIt https://github.com/hugo-fixit/FixIt https://github.com/henriksommerfeld/blog-hugo 1.hugo结构说明 # 站点结构 ├── archetypes # 原型 ├── config.toml # 站点配置 ├── content # 站点内容目录 ├── data # 数据模板 ├── layouts # 站点布局模板 ├── static # 静态内容 └── themes # 内容目录 content └── post ├── first-post │ ├── images │ │ ├── a.jpg │ │ ├── b.jpg │ │ └── c.jpg │ ├── index.md (root of page bundle) │ ├── latest.</description></item><item><title>Markdown基本使用</title><link>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 21 Sep 2017 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>图片嵌入 使用URL链接的形式插入图片：
![image][url_to_image]1 这样做一个明显的麻烦之处在于处理图片与Markdown文档的一致性上。如果我们要拷贝文档，或者图片遭到误删/云端链接失效，就会变得不便。最让我们省心的方法便是将图片直接放到文档内部。
一个将图片嵌入文档中的方法是使用base64编码。步骤比较简单：
将图片或截图保存在本地； 使用在线工具将图片转码至base64编码；(link1, link2)； 在文档中插入编码： ![image][data:image/png;base64, ......]1 当然base64编码一般很长，直接将编码放入段落内部会影响正常编辑。通常的做法是将base64编码定义到一个中间变量中，将编码本体放到文档末：
![image][tmp] your document here ... [tmp]:data:image/png;base64, ......1234 使用该技巧的时候需要注意，并不是所有的Markdown编辑器都支持这种方法。而且一些Markdown编辑器只支持特定的图片格式。如有道云笔记只支持png格式的图片编码。需要在保存图片文件的时候加以注意。
视频嵌入 layouts\shortcodes\html.html
{{.Inner}} hugo通过shortcodes前入Html
1.html中的video标签
2.html中的iframe标签</description></item><item><title>Markdown基本使用</title><link>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 21 Sep 2017 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>图片嵌入 使用URL链接的形式插入图片：
![image][url_to_image]1 这样做一个明显的麻烦之处在于处理图片与Markdown文档的一致性上。如果我们要拷贝文档，或者图片遭到误删/云端链接失效，就会变得不便。最让我们省心的方法便是将图片直接放到文档内部。
一个将图片嵌入文档中的方法是使用base64编码。步骤比较简单：
将图片或截图保存在本地； 使用在线工具将图片转码至base64编码；(link1, link2)； 在文档中插入编码： ![image][data:image/png;base64, ......]1 当然base64编码一般很长，直接将编码放入段落内部会影响正常编辑。通常的做法是将base64编码定义到一个中间变量中，将编码本体放到文档末：
![image][tmp] your document here ... [tmp]:data:image/png;base64, ......1234 使用该技巧的时候需要注意，并不是所有的Markdown编辑器都支持这种方法。而且一些Markdown编辑器只支持特定的图片格式。如有道云笔记只支持png格式的图片编码。需要在保存图片文件的时候加以注意。
视频嵌入 layouts\shortcodes\html.html
{{.Inner}} hugo通过shortcodes前入Html
1.html中的video标签
2.html中的iframe标签</description></item><item><title>Hexo基础使用</title><link>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 16 Sep 2017 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>博客工具
概述 Hugo Hexo Jekyll 博客工具
Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
安装hexo 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：
Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。
$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。
Mac 用户
您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&amp;gt; Download -&amp;gt; Command Line Tools -&amp;gt; Install 安装命令行工具。
安装 Git Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core Windows 用户</description></item><item><title>Hexo基础使用</title><link>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 16 Sep 2017 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>博客工具
概述 Hugo Hexo Jekyll 博客工具
Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
安装hexo 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：
Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。
$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。
Mac 用户
您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&amp;gt; Download -&amp;gt; Command Line Tools -&amp;gt; Install 安装命令行工具。
安装 Git Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core Windows 用户</description></item><item><title>开源项目索引</title><link>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%B4%A2%E5%BC%95/</link><pubDate>Sat, 16 Sep 2017 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/article/%E5%85%B6%E4%BB%96/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%B4%A2%E5%BC%95/</guid><description>1.alibaba 1.1.https://github.com/alibaba/canal.git canal [kə&amp;rsquo;næl]，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费
工作原理
canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议 MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal ) canal 解析 binary log 对象(原始为 byte 流) 谷歌的TensorFlow可以说是当今最受欢迎的开源深度学习框架，可用于各类深度学习相关的任务中。TensorFlow = Tensor + Flow，Tensor就是张量，代表N维数组；Flow即流，代表基于数据流图的计算。
2.google 2.1 https://github.com/rstudio/tensorflow TensorFlow是目前深度学习的主流框架，其主要特性如下所述。
TensorFlow支持Python、JavaScript、C ++、Java、Go、C＃、Julia和R等多种编程语言。 TensorFlow不仅拥有强大的计算集群，还可以在iOS和Android等移动平台上运行模型。 TensorFlow编程入门难度较大。初学者需要仔细考虑神经网络的架构，正确评估输入和输出数据的维度和数量。 TensorFlow使用静态计算图进行操作。也就是说，我们需要先定义图形，然后运行计算，如果我们需要对架构进行更改，则需要重新训练模型。选择这样的方法是为了提高效率，但是许多现代神经网络工具已经能够在学习过程中改进，并且不会显著降低学习速度。在这方面，TensorFlow的主要竞争对手是PyTorch。 其他深度学习项目参考
https://github.com/keras-team/keras https://github.com/BVLC/caffe https://github.com/pytorch/pytorch https://github.com/Theano/Theano https://github.com/Microsoft/CNTK https://github.com/apache/incubator-mxnet https://github.com/PaddlePaddle/Paddle/ https://github.com/eclipse/deeplearning4j https://github.com/onnx/onnx
3.linkedin 3.1 https://github.com/linkedin onecall
4.OpenJS Foundation https://github.com/electron 使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</description></item><item><title>开源项目索引</title><link>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%B4%A2%E5%BC%95/</link><pubDate>Sat, 16 Sep 2017 15:42:33 +0800</pubDate><guid>https://qiaomingzi.github.io/cn/article/%E5%85%B6%E4%BB%96/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%B4%A2%E5%BC%95/</guid><description>1.alibaba 1.1.https://github.com/alibaba/canal.git canal [kə&amp;rsquo;næl]，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费
工作原理
canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议 MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal ) canal 解析 binary log 对象(原始为 byte 流) 谷歌的TensorFlow可以说是当今最受欢迎的开源深度学习框架，可用于各类深度学习相关的任务中。TensorFlow = Tensor + Flow，Tensor就是张量，代表N维数组；Flow即流，代表基于数据流图的计算。
2.google 2.1 https://github.com/rstudio/tensorflow TensorFlow是目前深度学习的主流框架，其主要特性如下所述。
TensorFlow支持Python、JavaScript、C ++、Java、Go、C＃、Julia和R等多种编程语言。 TensorFlow不仅拥有强大的计算集群，还可以在iOS和Android等移动平台上运行模型。 TensorFlow编程入门难度较大。初学者需要仔细考虑神经网络的架构，正确评估输入和输出数据的维度和数量。 TensorFlow使用静态计算图进行操作。也就是说，我们需要先定义图形，然后运行计算，如果我们需要对架构进行更改，则需要重新训练模型。选择这样的方法是为了提高效率，但是许多现代神经网络工具已经能够在学习过程中改进，并且不会显著降低学习速度。在这方面，TensorFlow的主要竞争对手是PyTorch。 其他深度学习项目参考
https://github.com/keras-team/keras https://github.com/BVLC/caffe https://github.com/pytorch/pytorch https://github.com/Theano/Theano https://github.com/Microsoft/CNTK https://github.com/apache/incubator-mxnet https://github.com/PaddlePaddle/Paddle/ https://github.com/eclipse/deeplearning4j https://github.com/onnx/onnx
3.linkedin 3.1 https://github.com/linkedin onecall
4.OpenJS Foundation https://github.com/electron 使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</description></item></channel></rss>