<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>后端 on mingzi.li blog</title><link>http://qiaomingzi.github.io/categories/%E5%90%8E%E7%AB%AF/</link><description>Recent content in 后端 on mingzi.li blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 29 May 2022 15:42:33 +0000</lastBuildDate><atom:link href="http://qiaomingzi.github.io/categories/%E5%90%8E%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>读[GO语言核心36讲]</title><link>http://qiaomingzi.github.io/%E8%AF%BBgo%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/</link><pubDate>Sun, 29 May 2022 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/%E8%AF%BBgo%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/</guid><description>一：概要 1.1.参考 【GO编程语言规范】https://golang.google.cn/ref/spec
【GO命令】https://golang.google.cn/cmd/
【环境设置】https://www.liwenzhou.com/posts/Go/install_go_dev_old/
【Unicode】https://home.unicode.org/
二：Go语言基础知识 理解Go语言的开发环境配置、常用源码文件写法，以及程序实体（尤其是变量）及其相关的各种概念和编程技巧（比如类型推断、变量重声明、可重名变量、类型断言、类型转换、别名类型和潜在类型等）。
1.工作区和GOPATH GOROOT：Go语言安装根目录的路径，也就是GO语言的安装路径。
GOPATH：若干工作区目录的路径。是我们自己定义的工作空间。
你可以把GOPATH简单理解成Go语言的工作目录，它的值是一个目录的路径，也可以是多个目录路径，每个目录都代表Go语言的一个工作区（workspace）
go mod init qiaomingzi.github.io/m/v1 GOBIN：GO程序生成的可执行文件（executable file）的路径。
2.源码文件 2.1 运行程序 使用 go run 命令执行go源码main文件</description></item><item><title>GO SDK</title><link>http://qiaomingzi.github.io/go-sdk/</link><pubDate>Tue, 17 May 2022 21:34:28 +0800</pubDate><guid>http://qiaomingzi.github.io/go-sdk/</guid><description>all.bat all.rc archive bootstrap.bash bufio buildall.bash builtin bytes clean.bash clean.bat clean.rc cmd cmp.bash compress container context crypto database debug embed encoding errors expvar flag fmt 格 式 描 述 %v 按值的本来值输出 %+v 在 %v 基础上，对结构体字段名和值进行展开 %#v 输出 Go 语言语法格式的值 %T 输出 Go 语言语法格式的类型和值 %% 输出 % 本体 %b 整型以二进制方式显示 %o 整型以八进制方式显示 %d 整型以十进制方式显示 %x 整型以十六进制方式显示 %X 整型以十六进制、字母大写方式显示 %U Unicode 字符 %f 浮点数 %p 指针，十六进制方式显示 go go.</description></item><item><title>K8S</title><link>http://qiaomingzi.github.io/k8s/</link><pubDate>Sat, 16 Oct 2021 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/k8s/</guid><description>一：概要 1.1.参考 二：附录 log pod https://kubernetes.io/docs/concepts/cluster-administration/logging/
apiVersion: v1 kind: Pod metadata: name: counter spec: containers: - name: count image: busybox:1.28 args: [/bin/sh, -c, 'i=0; while true; do echo &amp;quot;$i: $(date)&amp;quot;; i=$((i+1)); sleep 1; done']</description></item><item><title>读[GO语言编程]</title><link>http://qiaomingzi.github.io/%E8%AF%BBgo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/</link><pubDate>Tue, 25 May 2021 09:34:28 +0800</pubDate><guid>http://qiaomingzi.github.io/%E8%AF%BBgo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/</guid><description>相关链接 https://github.com/golang 源码 https://golang.org/ref/mod 官方文档 https://golang.org/doc/code.html#Workspaces http://www.flysnow.org/categories/Golang/ go专栏 https://golanglibs.com/top 流行的GO应用和GO库 https://gitee.com/pengzhile/ide-eval-resetterv GoLand试用更新插件 一：前言 为什么需要GO语言 Go设计者认为C语言更值得学习，希望让它成为互联网时代的C语言。多数系统级语言（包括Java和C#）的根本编程哲学来源于C++，将C++的面向对象进一步发扬光大。C语言经久不衰的根源是它足够简单，Go语言也要足够简单。
那么GO需要关注哪些问题 与分布式支持
并发执行体：多核化和集群化是互联网时代的典型特征，操作系统自己掌管的进程（process）、进程内的线程（thread）以及进程内的协程（goroutine，也叫轻量级线程）。Go语言在语言级别支持协程，叫goroutine。Go语言准库提供的所有系统调用（syscall）操作，当然也包括所有同步IO操作，都会出让CPU给其他goroutine</description></item></channel></rss>