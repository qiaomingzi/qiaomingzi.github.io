<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles on mingzi.li blog</title><link>http://qiaomingzi.github.io/article/</link><description>Recent content in Articles on mingzi.li blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 16 Oct 2021 15:42:33 +0000</lastBuildDate><atom:link href="http://qiaomingzi.github.io/article/index.xml" rel="self" type="application/rss+xml"/><item><title>maven-wrapper基础使用</title><link>http://qiaomingzi.github.io/maven-wrapper%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 16 Oct 2021 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/maven-wrapper%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid><description>1.maven-wrapper安装使用 安装 在项目中使用命令安装mvn -N io.takari:maven:0.7.7:wrapper，参考官网 ,如果需要指定maven版本则使用mvn -N io.takari:maven:0.7.7:wrapper -Dmaven=3.5.4,安装完成后，目录如下
my-project ├── .mvn │ └── wrapper │ ├── MavenWrapperDownloader.java │ ├── maven-wrapper.</description></item><item><title>mysql master-slave</title><link>http://qiaomingzi.github.io/mysql-master-slave/</link><pubDate>Sat, 16 Oct 2021 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/mysql-master-slave/</guid><description>1.参考 【mysql8.0手册】https://dev.mysql.com/doc/refman/8.0/en/
2.主从同步 1)当从节点连接主节点时，主节点会为其创建一个 log dump 线程，用于发送和读取 Binlog 的内容。在读取 Binlog 中的操作时，log dump 线程会对主节点上的 Binlog 加锁；当读取完成发送给从节点之前，锁会被释放。主节点会为自己的每一个从节点创建一个 log dump 线程。
2)当从节点上执行start slave命令之后，从节点会创建一个 I/O 线程用来连接主节点，请求主库中更新的Binlog。I/O 线程接收到主节点的 log dump 进程发来的更新之后，保存在本地 relay-log（中继日志）中</description></item><item><title>Yarn相关</title><link>http://qiaomingzi.github.io/yarn%E7%9B%B8%E5%85%B3/</link><pubDate>Thu, 27 May 2021 09:46:19 +0800</pubDate><guid>http://qiaomingzi.github.io/yarn%E7%9B%B8%E5%85%B3/</guid><description>1.概述 Yarn是您的代码的包管理器，yarn和npm的对比
速度
npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。
安装版本统一
更简洁的输出
参考：</description></item><item><title>GO学习</title><link>http://qiaomingzi.github.io/go%E5%AD%A6%E4%B9%A0/</link><pubDate>Tue, 25 May 2021 09:34:28 +0800</pubDate><guid>http://qiaomingzi.github.io/go%E5%AD%A6%E4%B9%A0/</guid><description>相关链接 https://github.com/golang 源码 https://golang.org/ref/mod 官方文档 https://golang.org/doc/code.html#Workspaces http://www.flysnow.org/categories/Golang/ go专栏 https://golanglibs.com/top 流行的GO应用和GO库 https://gitee.com/pengzhile/ide-eval-resetterv GoLand试用更新插件 一：读书笔记 Limbo语言被认为是Go语言的前身,Limbo语言中继承了众多优秀的特性。包括肯·汤普逊在内的Plan 9项目原班人马加入了Google。在Google，他们创造了Go语言，Google是Go语言的主推。
学习书籍
《GO并发编程实战 第2版》《Go****语言核心编程》《Go语言高级编程》《Go Web编程》
初识GO语言 1.</description></item><item><title>Hugo基本使用</title><link>http://qiaomingzi.github.io/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 07 May 2021 17:03:36 +0800</pubDate><guid>http://qiaomingzi.github.io/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>hugo基本使用，通过hugo搭建个人blog
参考 [hugo] :https://gohugo.io/1.hugo结构说明 # 站点结构 ├── archetypes # 原型 ├── config.toml # 站点配置 ├── content # 站点内容目录 ├── data # 数据模板 ├── layouts # 站点布局模板 ├── static # 静态内容 └── themes # 内容目录 content └── post ├── first-post │ ├── images │ │ ├── a.</description></item><item><title>正则表达式30分钟入门教程</title><link>http://qiaomingzi.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link><pubDate>Thu, 28 Sep 2017 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid><description>目录 跳过目录
本文目标 如何使用本教程 正则表达式到底是什么东西？ 入门 测试正则表达式 元字符 字符转义 重复 字符类 分枝条件 反义 分组 后向引用 零宽断言 负向零宽断言 注释 贪婪与懒惰 处理选项 平衡组/递归匹配 还有些什么东西没提到 联系作者 网上的资源及本文参考文献 更新纪录 本文目标 30分钟内让你明白正则表达式是什么，并对它有一些基本的了解，让你可以在自己的程序或网页里使用它。</description></item><item><title>Markdown基本使用</title><link>http://qiaomingzi.github.io/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 21 Sep 2017 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>图片嵌入 使用URL链接的形式插入图片：
![image][url_to_image]1 这样做一个明显的麻烦之处在于处理图片与Markdown文档的一致性上。如果我们要拷贝文档，或者图片遭到误删/云端链接失效，就会变得不便。最让我们省心的方法便是将图片直接放到文档内部。
一个将图片嵌入文档中的方法是使用base64编码。步骤比较简单：
将图片或截图保存在本地； 使用在线工具将图片转码至base64编码；(link1, link2)； 在文档中插入编码： ![image][data:image/png;base64, ......]1 当然base64编码一般很长，直接将编码放入段落内部会影响正常编辑。通常的做法是将base64编码定义到一个中间变量中，将编码本体放到文档末：
![image][tmp] your document here ... [tmp]:data:image/png;base64, .</description></item><item><title>开源监控软件对比_zabbix</title><link>http://qiaomingzi.github.io/%E5%BC%80%E6%BA%90%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E5%AF%B9%E6%AF%94_zabbix/</link><pubDate>Mon, 18 Sep 2017 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/%E5%BC%80%E6%BA%90%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E5%AF%B9%E6%AF%94_zabbix/</guid><description>开源监控软件对比 Cacti**（英文含义仙人掌）** 是一套基于PHP、MySQL、SNMP和RRDtool开发的网络流量监测图形分析工具，它通过snmpget来获取数据使用RRDtool绘图，简化RRDtool使用。提供了非常强大的数据和用户管理功能，可以指定每一个用户能查看树状结构、主机设备以及任何一张图，还可以与LDAP结合进行用户认证，同时也能自定义模板。在历史数据展示监控方面，其功能相当不错。
Cacti通过添加模板，使不同设备的监控添加具有可复用性，并且具备可自定义绘图的功能，具有强大的运算能力（数据的叠加功能）
nagios Nagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。
Nagios 可以监控的功能有： 1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； 2、监控主机资源（处理器负荷、磁盘利用率等）； 3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法； 4、并行服务检查机制； 5、具备定义网络分层结构的能力，用&amp;quot;parent&amp;quot;主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态； 6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）； 7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位； 8、自动的日志回滚； 9、可以支持并实现对主机的冗余监控； 10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等；</description></item><item><title>Hexo基础使用</title><link>http://qiaomingzi.github.io/hexo%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 16 Sep 2017 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/hexo%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid><description>博客工具
概述 Hugo Hexo Jekyll 博客工具
Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
安装hexo 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：
Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</description></item><item><title>开源项目索引</title><link>http://qiaomingzi.github.io/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%B4%A2%E5%BC%95/</link><pubDate>Sat, 16 Sep 2017 15:42:33 +0000</pubDate><guid>http://qiaomingzi.github.io/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%B4%A2%E5%BC%95/</guid><description>alibaba 1.https://github.com/alibaba/canal.git canal [kə&amp;rsquo;næl]，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费
工作原理
canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议 MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal ) canal 解析 binary log 对象(原始为 byte 流) 待整理</description></item></channel></rss>